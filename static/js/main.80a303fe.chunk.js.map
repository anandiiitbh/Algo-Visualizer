{"version":3,"sources":["logo.svg","component/sample.jsx","component/sortingAlgorithms/sortingAlgorithms.js","component/SortingVisualizer/SortingVisualizer.jsx","component/component/slider.jsx","component/trial.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","Fragment","className","src","logo","alt","href","target","rel","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","speed","this","resetArray","min","max","random","setState","ANIMATION_SPEED_MS","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","y","setTimeout","style","backgroundColor","barOneIdxx","newHeight","barOneStyle","innerHTML","height","paddingTop","type","onClick","mergeSort","cursor","map","value","idx","key","width","React","Component","marks","label","useStyles","makeStyles","root","input","InputSlider","classes","useState","setValue","Grid","container","spacing","alignItems","item","fontSize","xs","Slider","onChange","event","newValue","aria-labelledby","Input","margin","Number","onBlur","inputProps","step","Visual","Algo","CountAlgo","view","header","bind","navigationBar","countAlgoButton","algoSelect","displayAlgo","pathFinding","sorting","color","data-toggle","aria-haspopup","aria-expanded","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.80a303fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./../logo.svg\";\nimport \"./../App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  animations.push([startIdx, endIdx]);\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    // animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    // animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      // animations.push([k, i]);\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      // animations.push([k, j]);\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    // animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    // animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    // animations.push([k, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    // animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    // animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    // animations.push([k, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","import React from \"react\";\nimport { getMergeSortAnimations } from \"../sortingAlgorithms/sortingAlgorithms.js\";\nimport \"./SortingVisualizer.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"jquery/dist/jquery.min.js\";\nimport \"bootstrap/dist/js/bootstrap.min.js\";\n\nconst NUMBER_OF_ARRAY_BARS = 50;\nconst PRIMARY_COLOR = \"#6c757d\";\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      speed: props.speed,\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 90));\n    }\n    // console.log({ array }, this);\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    const ANIMATION_SPEED_MS = this.state.speed;\n    // const SECONDARY_COLOR = \"#dc3545\";\n    const third_color = \"#28a745\";\n\n    const animations = getMergeSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName(\"elem\");\n    // console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const [barOneIdx, barTwoIdx] = animations[i];\n      for (let y = barOneIdx; y <= barTwoIdx; y++) {\n        setTimeout(() => {\n          arrayBars[y].style.backgroundColor = \"rgb(197, 17, 98)\";\n        }, i * ANIMATION_SPEED_MS);\n      }\n      for (let y = barOneIdx; y <= barTwoIdx; y++) {\n        i++;\n        const [barOneIdxx, newHeight] = animations[i];\n        const barOneStyle = arrayBars[barOneIdxx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = third_color;\n          arrayBars[y].innerHTML = newHeight;\n          barOneStyle.height = `${newHeight + 100}px`;\n          barOneStyle.paddingTop = `${newHeight + 75}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      for (let y = barOneIdx; y <= barTwoIdx; y++) {\n        setTimeout(() => {\n          arrayBars[y].style.backgroundColor = PRIMARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <React.Fragment>\n        <section className=\"d-flex pt-2 justify-content-center\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary mr-2 align-text-bottom \"\n            onClick={() => this.mergeSort()}\n          >\n            Start\n          </button>\n        </section>\n        <section className=\"d-flex pt-4 justify-content-center\">\n          <button\n            type=\"button\"\n            style={{ cursor: \"default\" }}\n            className=\"btn disabled btn-secondary mr-2 align-text-bottom \"\n            onClick={() => this.resetArray()}\n          >\n            Change Values\n          </button>\n        </section>\n\n        <section\n          className=\"d-flex justify-content-center mt-4 align-items-end\"\n          style={{ height: \"50vh\" }}\n        >\n          {array.map((value, idx) => (\n            <button\n              type=\"button\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: value + 100,\n                width: \"25px\",\n                paddingTop: 75 + value,\n              }}\n              className=\"btn btn-secondary mr-2 elem align-text-bottom \"\n            >\n              {value}\n            </button>\n          ))}\n        </section>\n      </React.Fragment>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Input from \"@material-ui/core/Input\";\nimport SpeedIcon from \"@material-ui/icons/Speed\";\nimport SortingVisualizer from \"./../SortingVisualizer/SortingVisualizer\";\n\nconst marks = [\n  {\n    value: 0,\n    label: \"0\",\n  },\n  {\n    value: 20,\n    label: \"20\",\n  },\n  {\n    value: 40,\n    label: \"40\",\n  },\n  {\n    value: 500,\n    label: \"500\",\n  },\n];\n\nconst useStyles = makeStyles({\n  root: {\n    width: 500,\n  },\n  input: {\n    width: 42,\n  },\n});\n\nexport default function InputSlider() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(30);\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChange = (event) => {\n    setValue(event.target.value === \"\" ? \"\" : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      setValue(0);\n    } else if (value > 100) {\n      setValue(100);\n    }\n  };\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Grid container spacing={2} alignItems=\"center\">\n          <Grid item>\n            <SpeedIcon fontSize=\"large\" />\n          </Grid>\n          <Grid item xs>\n            <Slider\n              value={typeof value === \"number\" ? value : 0}\n              onChange={handleSliderChange}\n              aria-labelledby=\"input-slider\"\n              marks={marks}\n              min={0}\n              max={500}\n            />\n          </Grid>\n          <Grid item>\n            <Input\n              className={classes.input}\n              value={value}\n              margin=\"dense\"\n              onChange={handleInputChange}\n              onBlur={handleBlur}\n              inputProps={{\n                step: 10,\n                min: 0,\n                max: 500,\n                type: \"number\",\n                \"aria-labelledby\": \"input-slider\",\n              }}\n            />\n          </Grid>\n        </Grid>\n      </div>\n      <SortingVisualizer speed={400} />\n    </>\n  );\n}\n","import React, { Component } from \"react\";\nimport logo from \"./../logo.svg\";\nimport App from \"./sample.jsx\";\n// import Sorting from \"./sorting.jsx\";\n// import PathFinding from \"./pathFinding\";\n// import SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"jquery/dist/jquery.min.js\";\nimport \"bootstrap/dist/js/bootstrap.min.js\";\nimport InputSlider from \"./component/slider\";\n\nclass Visual extends Component {\n  constructor() {\n    super();\n    this.header = this.header.bind(this);\n    this.navigationBar = this.navigationBar.bind(this);\n    this.countAlgoButton = this.countAlgoButton.bind(this);\n    this.algoSelect = this.algoSelect.bind(this);\n    this.displayAlgo = this.displayAlgo.bind(this);\n    this.pathFinding = this.pathFinding.bind(this);\n    this.sorting = this.sorting.bind(this);\n  }\n  state = {\n    Algo: 0,\n    CountAlgo: 0,\n    view: \"\",\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.header()}\n        {this.navigationBar()}\n      </React.Fragment>\n    );\n  }\n  header() {\n    return (\n      <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark justify-content-center\">\n        <img src={logo} alt=\"Logo\" style={{ width: 40 }} />\n        <a style={{ color: \"white\" }} href={{ href: \"#\" }}>\n          ~ Algorithm Visualizer ~\n        </a>\n        <img src={logo} alt=\"Logo\" style={{ width: 40 }} />\n      </nav>\n    );\n  }\n\n  navigationBar() {\n    return (\n      <React.Fragment>\n        <nav className=\"navbar navbar-expand-sm bg-dark navbar-dark\">\n          <div className=\"btn-group dropright mr-2 \">\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary btn-sm dropdown-toggle\"\n              data-toggle=\"dropdown\"\n              aria-haspopup=\"true\"\n              aria-expanded=\"false\"\n            >\n              Select Algo\n            </button>\n            <div className=\"dropdown-menu \">\n              <button\n                className=\"dropdown-item btn-secondary btn-sm\"\n                onClick={() =>\n                  this.setState({\n                    Algo: this.state.Algo * 0 + 1,\n                    CountAlgo: this.state.CountAlgo * 0,\n                  })\n                }\n              >\n                Sorting\n              </button>\n              <button\n                className=\"dropdown-item btn-secondary btn-sm\"\n                onClick={() =>\n                  this.setState({\n                    Algo: this.state.Algo * 0 + 2,\n                    CountAlgo: this.state.CountAlgo * 0,\n                  })\n                }\n              >\n                Path Finding\n              </button>\n              <button\n                className=\"dropdown-item btn-secondary btn-sm\"\n                onClick={() =>\n                  this.setState({\n                    Algo: this.state.Algo * 0 + 0,\n                    CountAlgo: this.state.CountAlgo * 0,\n                  })\n                }\n              >\n                Something else here\n              </button>\n            </div>\n          </div>\n          {this.algoSelect()}\n          {this.countAlgoButton()}\n        </nav>\n        {this.displayAlgo()}\n      </React.Fragment>\n    );\n  }\n  algoSelect() {\n    return this.state.Algo === 1\n      ? this.sorting()\n      : this.state.Algo === 2\n      ? this.pathFinding()\n      : \"\";\n  }\n  countAlgoButton() {\n    return this.state.CountAlgo === 0 ? (\n      \"\"\n    ) : (\n      <button type=\"button\" className=\"btn btn-secondary btn-sm \">\n        {this.state.CountAlgo === 1\n          ? \"MergeSort\"\n          : this.state.CountAlgo === 2\n          ? \"QuickSort\"\n          : this.state.CountAlgo === 3\n          ? \"Something else Here\"\n          : this.state.CountAlgo === 4\n          ? \"ABC\"\n          : this.state.CountAlgo === 5\n          ? \"XYZ\"\n          : \"Something else Here\"}\n      </button>\n    );\n  }\n\n  displayAlgo() {\n    return this.state.view;\n  }\n\n  sorting() {\n    return (\n      <div className=\"btn-group dropright mr-2\">\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary btn-sm dropdown-toggle\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          Sorting Algos\n        </button>\n        <div className=\"dropdown-menu \">\n          <button\n            className=\"dropdown-item btn-secondary btn-sm\"\n            onClick={() =>\n              this.setState({\n                CountAlgo: this.state.CountAlgo * 0 + 1,\n                view: (this.state.view = <InputSlider />),\n              })\n            }\n          >\n            Mergesort\n          </button>\n          <button\n            className=\"dropdown-item btn-secondary btn-sm\"\n            onClick={() =>\n              this.setState({\n                CountAlgo: this.state.CountAlgo * 0 + 2,\n                view: (this.state.view = \"\"),\n              })\n            }\n          >\n            Quicksort\n          </button>\n          <button\n            className=\"dropdown-item btn-secondary btn-sm\"\n            onClick={() =>\n              this.setState({\n                CountAlgo: this.state.CountAlgo * 0 + 3,\n                view: (this.state.view = <App />),\n              })\n            }\n          >\n            Something else here\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  pathFinding() {\n    return (\n      <div className=\"btn-group dropright mr-2\">\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary btn-sm dropdown-toggle\"\n          data-toggle=\"dropdown\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n        >\n          Path Finding Algos\n        </button>\n        <div className=\"dropdown-menu \">\n          <button\n            className=\"dropdown-item btn-secondary btn-sm\"\n            onClick={() =>\n              this.setState({\n                CountAlgo: this.state.CountAlgo * 0 + 4,\n                view: (this.state.view = \"\"),\n              })\n            }\n          >\n            ABC\n          </button>\n          <button\n            className=\"dropdown-item btn-secondary btn-sm\"\n            onClick={() =>\n              this.setState({\n                CountAlgo: this.state.CountAlgo * 0 + 5,\n                view: (this.state.view = <App />),\n              })\n            }\n          >\n            XYZ\n          </button>\n          <button\n            className=\"dropdown-item btn-secondary btn-sm\"\n            onClick={() =>\n              this.setState({\n                CountAlgo: this.state.CountAlgo * 0 + 6,\n                view: (this.state.view = \"\"),\n              })\n            }\n          >\n            Something else here\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Visual;\n","import React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Visual from \"./component/trial\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Visual />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}